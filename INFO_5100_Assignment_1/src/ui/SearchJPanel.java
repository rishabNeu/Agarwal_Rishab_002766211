/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Employee;
import model.EmployeeHistory;

/**
 *
 * @author Rishab
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    EmployeeHistory empHistory;

    public SearchJPanel(EmployeeHistory history) {
        initComponents();
        empHistory = history;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSearchTitle = new javax.swing.JLabel();
        btnSearchOperation = new javax.swing.JButton();
        comboSearch = new javax.swing.JComboBox<>();
        txtComboValue = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployees = new javax.swing.JTable();
        btnClear = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        btnViewImage = new javax.swing.JButton();

        lblSearchTitle.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        lblSearchTitle.setText("Search Employee");

        btnSearchOperation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearchOperation.setText("Search");
        btnSearchOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOperationActionPerformed(evt);
            }
        });

        comboSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Id", "Age", " " }));
        comboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSearchActionPerformed(evt);
            }
        });

        txtComboValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComboValueActionPerformed(evt);
            }
        });

        tblEmployees.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tblEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Employee ID", "Age", "Gender", "Start Date", "Level", "Team Info", "Position", "Mobile no", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployees);

        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnViewImage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnViewImage.setText("Click Here to View Image");
        btnViewImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtComboValue, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(lblSearchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnViewImage, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblSearchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchOperation)
                    .addComponent(txtComboValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(btnViewImage, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOperationActionPerformed

        boolean isPresent = false;
        //list we got now 
        ArrayList<Employee> empList = empHistory.getEmpList();

        String comboSearchType = comboSearch.getSelectedItem().toString();

        String comboValue = txtComboValue.getText();
        
        
        if (comboValue.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter something in the search box");
            txtComboValue.requestFocus();
            return;
        }

        ArrayList<Employee> searchedEmployeeList = new ArrayList<>();

        if (comboSearchType.equalsIgnoreCase("Name")) {
            for (Employee employee : empList) {
                if (employee.getName().toLowerCase().contains(comboValue.toLowerCase())) {

                    searchedEmployeeList.add(employee);
                    isPresent = true;
                }
            }
        } else if (comboSearchType.equalsIgnoreCase("Id")) {
            
            //isNumeric check
            if(isNumeric(comboValue)==false){
                JOptionPane.showMessageDialog(this,"Please enter in numeric format only");
                txtComboValue.requestFocus();
                txtComboValue.setText("");
                return;
            }
            
            for (Employee employee : empList) {

                     if (Integer.parseInt(comboValue)== employee.getEmpId()) {

                    searchedEmployeeList.add(employee);
                    isPresent = true;
                }

            }
        } else if (comboSearchType.equalsIgnoreCase("Age")) {
            
             //isNumeric check
            if(isNumeric(comboValue)==false){
                JOptionPane.showMessageDialog(this,"Please enter in numeric format only");
                txtComboValue.requestFocus();
                txtComboValue.setText("");
                return;
            }
            
            for (Employee employee : empList) {

                if (Integer.parseInt(comboValue)== employee.getAge()) {

                    searchedEmployeeList.add(employee);
                    isPresent = true;
                }

            }
        }

        DefaultTableModel model = (DefaultTableModel) tblEmployees.getModel();

        model.setRowCount(0);

        for (Employee emp : searchedEmployeeList) {
            Object[] row = new Object[10];
            row[0] = emp;
            row[1] = emp.getEmpId();
            row[2] = emp.getAge();
            row[3] = emp.getGender();
            row[4] = emp.getStartDate();
            row[5] = emp.getLevel();
            row[6] = emp.getTeamInfo();
            row[7] = emp.getPositionTitle();
            row[8] = emp.getMobileNo();
            row[9] = emp.getEmail();

            model.addRow(row);

        }

        if (isPresent == false) {
            JOptionPane.showMessageDialog(null, "No Records found");
            return;
        }


    }//GEN-LAST:event_btnSearchOperationActionPerformed

    private void txtComboValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComboValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtComboValueActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        txtComboValue.setText("");
        DefaultTableModel model = (DefaultTableModel) tblEmployees.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        // comboSearch.setse

    }//GEN-LAST:event_btnClearActionPerformed

    private void comboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSearchActionPerformed

    private void btnViewImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewImageActionPerformed

        int selectRowIndex = tblEmployees.getSelectedRow();

        if (selectRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to view the Profile picture");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblEmployees.getModel();
        Employee selectedEmp = (Employee) model.getValueAt(selectRowIndex, 0);

        if (selectedEmp.getPhoto() == null) {
            JOptionPane.showMessageDialog(null, "Photo not found for this profile");

        } else {
            SetProfilePhoto(selectedEmp.getPhoto());

        }

    }//GEN-LAST:event_btnViewImageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSearchOperation;
    private javax.swing.JButton btnViewImage;
    private javax.swing.JComboBox<String> comboSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblSearchTitle;
    private javax.swing.JTable tblEmployees;
    private javax.swing.JTextField txtComboValue;
    // End of variables declaration//GEN-END:variables

    private void SetProfilePhoto(String photo) {
        Image img = Toolkit.getDefaultToolkit().createImage(photo);
        img = img.getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(img);
        lblPhoto.setIcon(icon);
    }
    
    private boolean isNumeric(String value) {

        if (value == null || value == "") {
            return false;
        }
        try {
            int temp = Integer.parseInt(value);

        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;

    }
    
}
